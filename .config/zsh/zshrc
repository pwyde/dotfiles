#
#  ~/.zshrc
#             _
#     ___ ___| |_ ___ ___
#   _|- _|_ -|   |  _|  _|
#  |_|___|___|_|_|_| |___|
#

# Used for debugging.
#zmodload zsh/zprof

################################################################################
#  CONFIGURE ZINIT
################################################################################

# Zinit Commands
#
# load:
#   Load plugin...
# light:
#   Load plugin in light mode, without reporting/tracking. See output from
#   'zinit report' command. When a plugin is light loaded, reporting of
#   functions, variables etc. is not available. For more information, see
#     - https://zdharma-continuum.github.io/zinit/wiki/INTRODUCTION/
#     - https://github.com/zdharma-continuum/zinit#loading-and-unloading
#   Note that unloading a plugin requires the plugin to be loaded with tracking
#   (zinit load). Tracking causes slight slowdown, this does however not
#   influence Zsh startup time when using Turbo mode. See 'wait' ice modifier.
# snippet:
#   Source local or remote file (by direct URL).

# Zinit Ice Modifiers
#
# Zinit uses 'ice' modifiers as a term for adding something next to the 'zinit'
# command and that is temporary. Hence the modification will only last for a
# single zinnit command.
#
# Conditional Loading: https://github.com/zdharma-continuum/zinit#conditional-loading
# wait:
#   Ice modifier that postpones loading of a plugin, known in Zinit as Turbo
#   mode. When 'wait' is specified without value, it is equal to using wait'0'.
#   When using exclamation mark (wait'!...'), Zinit will reset the prompt after
#   loading plugin. This is needed by many themes.
#
# Plugin Output: https://github.com/zdharma-continuum/zinit#plugin-output
# lucid:
#   Skip "Loaded ..." message under prompt for 'wait' ice modifier.
#
# Completions: https://github.com/zdharma-continuum/zinit#completions
# blockf:
#   Blocks the traditional method of adding completions. Zinit uses own method
#   (based on symlinks instead of adding a number of directories to $fpath).
#   Zinit will automatically install completions of a newly downloaded plugins.
#
# Command Execution After Cloning, Updating or Loading:
# https://github.com/zdharma-continuum/zinit#command-execution-after-cloning-updating-or-loading
# atinit:
#   Run command after directory setup (cloning, checking, etc.) of plugin or
#   snippet but before loading.
# atload:
#   Run command after loading and from within the plugin's directory. Can also
#   be used with snippets. Passed code can be preceded with '!'', it will then
#   be investigated (if using 'load', not 'light').
#
# Others: https://github.com/zdharma-continuum/zinit#others
# light-mode:
#   Load plugin in 'light' mode when using 'for' syntax.

# Zinit Packages.
#
# Zinit supports special, dedicated packages that offload the user from
# providing long and complex commands. For more information, see
#   - https://zdharma-continuum.github.io/zinit/wiki/Zinit-Packages/
#   - https://github.com/zdharma-continuum/zinit-packages

# Install Zinit if missing.
if [[ ! -f ${XDG_CONFIG_HOME}/zsh/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing Zinit Plugin Manager (zdharma-continuum/zinit)…%f"
    command mkdir -p "${XDG_CONFIG_HOME}/zsh/.zinit" && command chmod g-rwX "${XDG_CONFIG_HOME}/zsh/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit.git "${XDG_CONFIG_HOME}/zsh/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block. Everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Load Zinit.
source "${XDG_CONFIG_HOME}/zsh/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo mode as this is currently
# required for annexes. This is added by Zinit's installer.
zinit light-mode for \
    zdharma-continuum/zinit-annex-{'readurl','bin-gem-node','patch-dl','rust'}

# Theme the prompt with Powerlevel10k.
zinit light romkatv/powerlevel10k

# Load essential plugins.
#
# zsh-history-substring-search:
#   FishShell-like history search feature.
# zsh-autosuggestions:
#   FishShell-like fast and unobtrusive autosuggestions.
# fast-syntax-highlighting:
#   FishShell-like syntax highlighting (fast implementation).
# zsh-completions:
#   Additional completion definitions.
#
# Notes:
#   Plugins are loaded using the 'for' syntax with the use of Turbo mode
#   according to https://github.com/zdharma-continuum/fast-syntax-highlighting#zinit
#
#   The zsh-history-substring-search plugin must be loaded before
#   zsh-autosuggestions plugin to avoid "unhandled ZLE widget" error.
#
#   The fast-syntax-highlighting plugin expects to be loaded last, even after
#   the completion initialisation, i.e. 'compinit' function. In practice it
#   just have to be ensured that such plugins are loaded after plugins that are
#   issuing 'compdef', which basically mean completions that are not using the
#   underscore-starting function file. The completion initialization still has
#   to be performed before fast-syntax-highlighting plugin, hence the use of
#   'atinit' ice modifier, which will load 'compinit' right before loading the
#   plugin. 'zicompinit' is a built-in Zinit function that runs 'autoload
#   compinit; compinit'. 'zicdreplay' is another built-in Zinit function that
#   will replay any caught compdefs.
#
zinit wait lucid for \
    zsh-users/zsh-history-substring-search \
    atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
        zdharma-continuum/fast-syntax-highlighting \
    blockf \
        zsh-users/zsh-completions \
    atload"!_zsh_autosuggest_start" \
        zsh-users/zsh-autosuggestions

# Load additional plugins.
#
# alias-tips:
#   Help remembering shell aliases.
# fzf-tab:
#   Replace Zsh default completion selection menu with fzf.
# up:
#   Use 'up' to navigate directories.
# zfs-completion:
#   zfs completion script.
#
zinit wait lucid for \
    djui/alias-tips \
    Aloxaf/fzf-tab \
    peterhurford/up.zsh \
    luoxu34/zfs-completion

# Load plugins from Oh My Zsh.
#
# archlinux:
#   Adds some aliases and functions to work with Arch Linux.
# colored-man-pages:
#   Adds colors to man pages.
# command-not-found:
#   This plugin uses the command-not-found package for zsh to provide
#   suggested packages to be installed if a command cannot be found.
# debian:
#   Provides Debian-related aliases and functions for zsh.
# docker:
#   Adds auto-completion and aliases for docker.
# docker-compose:
#   Provides completion for docker-compose as well as some aliases for
#   frequent docker-compose commands.
# dirhistory:
#   Adds keyboard shortcuts for navigating directory history and hierarchy.
# extract:
#   Defines a function called extract that extracts the archive file passed
#   to it, and it supports a wide variety of archive file types.
# fluxcd:
#   Adds completion for FluxCD.
# git:
#   Adds many aliases for Git commands.
# kubectl:
#   Adds completion and aliases for kubectl commands.
# thefuck:
#   Corrects previous console command by pressing 'Esc' twice.
#
zinit wait lucid for \
    OMZP::archlinux \
    OMZP::colored-man-pages \
    OMZP::command-not-found \
    OMZP::debian \
    OMZP::direnv \
    OMZP::docker \
    OMZP::docker-compose \
    OMZP::dirhistory \
    OMZP::extract \
    OMZP::fluxcd \
    OMZP::git \
    OMZP::kubectl \
    OMZP::thefuck \
    OMZP::ubuntu

# Load completions from Oh My Zsh.
#
# Note:
#   Completions from Oh My Zsh are loaded using the 'for' syntax with the use
#   of Turbo mode. The use of as"completion" ice modifier specifies that Zinit
#   should only load snippets starting with underscore (completion file).
#
zinit wait lucid as"completion" for \
    OMZP::docker/completions/_docker \
    OMZP::docker-compose/_docker-compose

# Install additional popular programs.
#
# For more information, see
# https://github.com/zdharma-continuum/zinit/wiki/Recipes-for-popular-programs
#
# bat
zi for \
    from'gh-r' \
    sbin'**/bat -> bat' \
    @sharkdp/bat
# bottom
zi for \
    from'gh-r' \
    sbin'**/btm -> btm' \
    ClementTsang/bottom
# direnv
zinit from"gh-r" as"program" mv"direnv* -> direnv" \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    pick"direnv" src="zhook.zsh" for \
        direnv/direnv
# exa
zi for \
    atclone'cp -vf completions/exa.zsh _exa' \
    from'gh-r' \
    sbin'**/exa -> exa' \
    ogham/exa
# eza
zi for \
    from'gh-r' \
    sbin'**/eza -> eza' \
    eza-community/eza
zinit ice as"completion"
zinit snippet https://raw.githubusercontent.com/eza-community/eza/main/completions/zsh/_eza
# fd
zi for \
    from'gh-r'  \
    sbin'**/fd -> fd' \
    @sharkdp/fd
# fzf
zi for \
    from'gh-r' \
    sbin'fzf'  \
    junegunn/fzf
zi for \
    https://github.com/junegunn/fzf/raw/master/shell/{'completion','key-bindings'}.zsh
# procs
zi for \
    from'gh-r' \
    sbin'**/procs -> procs' \
    dalance/procs
# ripgrep
zi for \
    from'gh-r' \
    sbin'**/rg -> rg' \
    BurntSushi/ripgrep

################################################################################
#  CONFIGURE ZSH
################################################################################

# Only alphanumerical characters  make up words in word-based zle widgets.
typeset -g WORDCHARS=''

# Do not eat space when typing '|' after a tab completion.
typeset -g ZLE_REMOVE_SUFFIX_CHARS=''

################################################################################
#  CONFIGURE HISTORY
################################################################################

source "${ZLIB}/history.zsh"

################################################################################
#  CONFIGURE COLORS
################################################################################

source "${ZLIB}/colors.zsh"

################################################################################
#  CONFIGURE KEY BINDINGS
################################################################################

source "${ZLIB}/keybindings.zsh"

################################################################################
#  CONFIGURE COMPLETION SYSTEM
################################################################################

source "${ZLIB}/completion.zsh"

################################################################################
#  CONFIGURE XTERM TITLE
################################################################################

source "${ZLIB}/terminal.zsh"

################################################################################
#  CONFIGURE ALIASES
################################################################################

source "${ZLIB}/aliases.zsh"

################################################################################
#  CONFIGURE PLUGINS
################################################################################

source "${ZLIB}/plugins-conf.zsh"

################################################################################
#  CONFIGURE GPG AGENT & PINENTRY
################################################################################

# Configure pinentry to use the correct TTY.
export GPG_TTY=$(tty)

# Launch gpg-agent to be used by SSH and use the correct TTY if running
# KDE Neon.
#
# According to Arch Wiki the command below is needed to "refresh the TTY in
# case user has switched into an X session". Not executing it does however not
# seem to have any negative effect on Arch Linux, other than not applying the
# configured Plasma theme to the pinentry Qt interface. Hence it is not
# executed on Arch Linux. For more information, see
# https://wiki.archlinux.org/index.php/GnuPG#Set_SSH_AUTH_SOCK
if [[ "${NAME}" == "KDE neon" ]]; then
    gpg-connect-agent updatestartuptty /bye >/dev/null
fi

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
# Test if session is running Xorg/Wayland.
if [[ -z $DISPLAY ]]; then
    # Test if session is virtual console (tty) or other.
    if [[ $(tty) = /dev/tty[0-9]* ]]; then
        # Running in console, do not display icons in prompt.
        source ~/.config/zsh/.p10k-tty.zsh
    else
        # Running Xorg/Wayland, display icons in prompt.
        source ~/.config/zsh/.p10k.zsh
    fi
else
    # Running Xorg/Wayland, display icons in prompt.
    source ~/.config/zsh/.p10k.zsh
fi
