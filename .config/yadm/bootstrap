#!/usr/bin/env bash

# VARIABLES/CONSTANTS ##########################################################

# Variables for dotfiles repo.
git_host="github.com"
git_user="pwyde"
git_repo="dotfiles"
git_url="https://${git_host}/${git_user}/"

# Variables for temporary files/directories.
temp_file="$(mktemp -u)"
temp_dir="$(mktemp -d)"

# Variables for Nerd fonts.
font_ver="v3.3.0"

# Set XDG directories.
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"

# Set Zsh configuration directory.
export ZDOTDIR="${HOME}/.config/zsh"
# Set Vim configuration directory.
export VIMINIT=":source $XDG_CONFIG_HOME/vim/vimrc"

# Set user bin directory.
export USER_BIN_DIR="${HOME}/.local/bin"

## Colorize output.
# shellcheck disable=SC2034
red="\033[91m"
# shellcheck disable=SC2034
green="\033[92m"
# shellcheck disable=SC2034
blue="\033[94m"
# shellcheck disable=SC2034
yellow="\033[93m"
# shellcheck disable=SC2034
white="\033[97m"
# shellcheck disable=SC2034
no_color="\033[0m"

# ARRAYS #######################################################################

# Array for package dependencies.
pkg_list=("curl"
          "git"
          "tree"
          "unzip"
          "vim"
          "zsh")

# Array for Brew packages.
brew_list=("atuin"
           "bat"
           "bat-extras"
           "bottom"
           "duf"
           "dust"
           "eza"
           "fd"
           "oh-my-posh"
           "procs"
           "ripgrep"
           "starship"
           "vivid"
           "zoxide")

# Array for AUR packages
aur_list=("${brew_list[@]}")
aur_list+=("fzf")

# Array for fonts.
fonts_list=("FiraCode"
            "SourceCodePro")

# FUNCTIONS ####################################################################

print_header() {
    echo -e "${blue}
       _     _   ___ _ _
     _| |___| |_|  _|_| |___ ___
   _| . | . |  _|  _| | | -_|_ -|
  |_|___|___|_| |_| |_|_|___|___|${yellow}
  BOOTSTRAP SCRiPT${white}

  ${git_url}${git_repo}${no_color}
" >&1
}

print_footer() {
    echo -e "${blue}
  Bootstrap of dotfiles completed!${yellow}
  Log out${blue} and${yellow} login${blue} to apply changes!${white}

  See README for more information;
  ${git_url}${git_repo}/.github/README.md${no_color}
" >&1
}

print_msg() {
    echo -e "${green}=>${no_color}${white}" "${@}" "${no_color}" >&1
}

print_error() {
    echo -e "${red}=> ERROR:${no_color}${white}" "${@}" "${no_color}" >&2
}

cleanup_tmp() {
    rm -rf "${temp_file}" "${temp_dir}"
}

pac_install() {
    print_msg "Updating package database..."
    sudo pacman -Sy
    print_msg "Installing package dependencies..."
    sudo pacman -S --noconfirm "${pkg_list[@]}"
}

aur_install() {
    if command -v paru &> /dev/null; then
        print_msg "Installing AUR packages..."
        paru -S --noconfirm "${aur_list[@]}"
    elif command -v yay &> /dev/null; then
        print_msg "Installing AUR packages..."
        yay -S --noconfirm "${aur_list[@]}"
    else
        print_error "No AUR helper available! Skipping AUR packages..."
    fi
}

deb_install() {
    print_msg "Updating package database..."
    sudo apt update
    print_msg "Installing package dependencies..."
    # Add Homebrew dependencies to package array.
    pkg_list+=("build-essential" "procps" "file")
    sudo apt install --yes "${pkg_list[@]}"
}

install_homebrew() {
    print_msg "Installing Homebrew..."
    # Install Homebrew according to https://docs.brew.sh/Homebrew-on-Linux
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    [ -d /home/linuxbrew/.linuxbrew ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    # Recommended steps bewlo...
    brew doctor
    brew services
    brew install gcc
}

brew_install() {
    print_msg "Installing brew packages..."
    brew install "${brew_list[@]}"
}

install_pkgs() {
    # Operating system identification. For more information, see
    # https://www.freedesktop.org/software/systemd/man/os-release.html
    if [[ "${OSTYPE}" = linux-gnu* ]]; then
        # shellcheck disable=SC1091
        [ -f "/etc/os-release" ] && source /etc/os-release
        case "${NAME}" in
            *Arch*)
                print_msg "Operating system identified as '$NAME'.";
                pac_install
                aur_install
                ;;
            *Debian*)
                print_msg "Operating system identified as '$NAME'.";
                deb_install
                install_homebrew
                brew_install
                ;;
            *neon*)
                print_msg "Operating system identified as '$NAME'.";
                deb_install
                install_homebrew
                brew_install
                ;;
            *Ubuntu*)
                print_msg "Operating system identified as '$NAME'.";
                deb_install
                install_homebrew
                brew_install
                ;;
            *)
                print_error "Unable to identify operating system! Could not install packages...";
                exit 1
                ;;
        esac
    else
        print_error "Unsupported operating system! Could not install packages..."
        exit 1
    fi
}

bootstrap_zsh() {
    print_msg "Bootstrapping Zsh..."
    # Array for Zsh configuration directory/files.
    zsh_dotfiles=(".zsh" ".zlogin" ".zlogout" ".zprofile" ".zshenv" ".zshrc")
    # Delete default Zsh configuration files if present.
    for file in "${zsh_dotfiles[@]}"; do
        [ -e "${HOME}/${file}" ] && rm -rf "${HOME:?}/${file}" >/dev/null 2>&1
    done
    print_msg "Set Zsh as default shell..."
    # Set default shell to Zsh.
    chsh -s "$(command -v zsh)"
    print_msg "Adding system-wide Zsh configuration options..."
    # Set path to Zsh configuration files (system-wide configuration). We want
    # to do this to avoid as many dotfiles as possible in user home directory.
    # shellcheck disable=SC2016
    echo 'export ZDOTDIR="${HOME}/.config/zsh"' | \
    sudo tee --append /etc/zsh/zshenv >/dev/null 2>&1
}

bootstrap_vim() {
    print_msg "Bootstrapping Vim..."
    # Array for Vim configuration directory/files.
    vim_dotfiles=(".vim" ".vimrc" ".viminfo")
    # Delete default Vim configuration files if present.
    for file in "${vim_dotfiles[@]}"; do
        [ -e "${HOME}/${file}" ] && rm -rf "${HOME:?}/${file}" >/dev/null 2>&1
    done
    # Create viminfo file to avoid errors from startify plugin.
    mkdir -p "${XDG_DATA_HOME}/vim" && touch "${XDG_DATA_HOME}/vim/viminfo"
    print_msg "Installing vim-plug..."
    # Install vim-plug and plugins.
    [ ! -e "${XDG_CONFIG_HOME}/vim/autoload/plug.vim" ] && \
    curl -fLo "${XDG_CONFIG_HOME}/vim/autoload/plug.vim" --create-dirs \
    "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" --progress-bar && \
    vim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
}

font_options() {
    echo -e "${yellow}
  Options for font installation.${no_color}
" >&1
    echo -e "${yellow}  1)${white} None. Do not install any fonts.${no_color}" >&1
    echo -e "${yellow}  2)${white} Basic. Install only the 'Fira Code' and 'Source Code Pro' Nerd fonts.${no_color}" >&1
    echo -e "${yellow}  3)${white} Complete. Install the complete collection of 'Nerd Fonts'.${no_color}" >&1
    echo
}

install_fonts() {
    font_options
    while [ -z "${font_option}" ]; do
        echo -en "${white}  Option${yellow} [1/2/3]${white}: ${no_color}"
        read -r opt
        echo
        case "${opt}" in
            [1]*) font_option=1 ;;
            [2]*) font_option=2; font_dir="${XDG_DATA_HOME}/fonts/${font_name}" ;;
            [3]*) font_option=3; font_name="NerdFonts" font_dl_url="https://github.com/ryanoasis/nerd-fonts.git" ;;
            *) echo -e "Invalid option '${opt}'." >&2; font_options ;;
        esac
    done
    if [ "${font_option}" = 1 ]; then
        print_msg "Skipping font installation..."
    elif [ "${font_option}" = 2 ]; then
        for font in "${fonts_list[@]}"; do
            font_dl_url="https://github.com/ryanoasis/nerd-fonts/releases/download/${font_ver}/${font}.zip"
            # Create font directory if it does not exist.
            mkdir -p "${font_dir}"
            print_msg "Downloading '${font}' font..."
            # Download fonts, extract and overwrite files such as README.md...
            curl -fLo "${temp_file}" "${font_dl_url}" --progress-bar
            print_msg "Installing '${font}' font..."
            unzip -o -q "${temp_file}" -d "${temp_dir}"
            cp "${temp_dir}"/*.ttf "${font_dir}"
        done
        fc-cache -f -v >/dev/null 2>&1
    elif [ "${font_option}" = 3 ]; then
        print_msg "Downloading '$font_name'..."
        # Install the complete Nerd Fonts font collection.
        git clone --depth 1 "${font_dl_url}" "${temp_dir}/${font_name}"
        print_msg "Installing fonts..."
        "${temp_dir}/${font_name}/install.sh" --quiet >/dev/null 2>&1
    fi
}

cleanup_options() {
    echo -e "${yellow}
  Cleanup home directory?${no_color}
" >&1
    echo -e "${yellow}  y)${white} Yes. This removes unused dotfiles.${no_color}" >&1
    echo -e "${yellow}  n)${white} No. Skip this step and leave all existing dotfiles as is.${no_color}" >&1
    echo
}

cleanup_home() {
    # Array for common dotfiles.
    dotfiles=(".bash_history" ".bash_logout" ".bash_profile" ".bashrc" \
    ".dircolors" ".dir_colors" ".gconf" ".gitconfig" ".kde" ".kde4" ".lesshst" \
    ".profile" ".vim" ".viminfo" ".vimrc" ".zlogin" ".zlogout" ".zprofile" \
    ".zshenv" ".zshrc" ".wget-hsts")
    found=0 # Set to 1 if file found in the for loop.
    # Find any pre-existing dotfiles.
    for file in "${dotfiles[@]}"; do
        if [ -e "${HOME}/${file}" ]; then
            found=1; break
        fi
    done
    # If true, offer to cleanup home directory.
    if [ "${found}" = 1 ]; then
        cleanup_options
        while [ -z "${cleanup_option}" ]; do
            echo -en "${white}  Option${yellow} [y/n]${white}: ${no_color}"
            read -r opt
            echo
            case "${opt}" in
                [y]|[Y]*) cleanup_option=1 ;;
                [n]|[N]*) cleanup_option=2 ;;
                *) echo -e "Invalid option '${opt}'." >&2; cleanup_options ;;
            esac
        done
        if [ "${cleanup_option}" = 1 ]; then
            print_msg "Cleaning home directory..."
            # Cleanup user's home directory.
            for file in "${dotfiles[@]}"; do
                [ -e "${HOME}/${file}" ] && rm -ri "${HOME:?}/${file}"
            done
        fi
    fi
}

update_yadm_repo() {
    print_msg "Updating the yadm repo origin URL..."
    yadm remote set-url origin "git@${git_host}:${git_user}/${git_repo}.git"
}

# EXECUTE FUNCTIONS ############################################################

print_header
install_pkgs
bootstrap_zsh
bootstrap_vim
install_fonts
cleanup_home
update_yadm_repo
cleanup_tmp
print_footer
